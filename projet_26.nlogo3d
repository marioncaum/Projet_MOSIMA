breed [ providers provider ]
breed [ consumers consumer ]

globals [
  rayon ; rayon de la sphère
  mu-min ; liste des différentes moyennes des classes des providers
  mu-max
  sigma ; liste des différents écarts-types des classes des providers
  colors
  moyenne-IT
]

providers-own [
  performance ; N(mu, sigma)
]

consumers-own[
  alpha ; activité d'agent 1 = active dans tous les tours, 0 = jamais actif
]

turtles-own [
  r0 ; distance du voisinage
  theta ; angle 1
  phi ; angle 2
  R-IT
  R-CR
  R-WR
]

; ============================= ACTIONS A EFFECTUER A LA FIN DE CHAQUE TOUR =======================

; les providers vont changer leur profile avec une probabilité p_switchProfile

to switch-profile ; fonction applicable aux providers - ils changent la classe de performance apres chaque tour aec un proba p_switchProfile
  let x random 100

  if x <= p_switchProfile[ ; avec la probabilite p_switchProfile, l'agent change sa classe
      let classe random 3
      let m-min item classe mu-min
      let m-max item classe mu-max
      let m (m-min + random-float (m-max - m-min))
      let s item classe sigma
      set performance random-normal m s
      set color item classe colors
  ]
end

; les providers vont changer leur performance d'un quantité d_mu avec une probabilité p_muC

to change-performance
   let x random 100

  if x <= p_muC [
    let d_mu ( - M_mu + random-float (2 * M_mu))
    let performance_max item 0 mu-max
    let performance_min item 2 mu-min

    ifelse performance + d_mu > performance_max
    [set performance performance_max]
    [ifelse performance + d_mu < performance_min
      [set performance performance_min]
      [set performance (performance + d_mu)]]

    ;show performance
    if (performance >= 5 and performance <= 10)
    [set color item 0 colors]

    if (performance >= 0 and performance < 5)
    [set color item 1 colors]

  if (performance < 0)
    [set color item 2 colors]
  ]
end

; chaque agent change sa position avec une probabilité p_plc

to change-position
   let x random 100

   if x <= p_plc [
     let dtheta (- d_phi + random-float (2 * d_phi))
     let dphi (- d_phi + random-float (2 * d_phi))
     set theta (theta + dtheta)
     set phi (phi + dphi)

     let coord pos theta phi rayon
     setxyz item 0 coord
            item 1 coord
            item 2 coord
   ]

end

; il y a x providers qui quittent le MAS a la fin de chaque étape; x est limité par une quantité p_PPC - une proportion de la population
to remove-providers
  let x random p_PPC

  let nb_remove (nb-providers / 100 * x )
  ;show "remove: "
  ;show nb_remove
  let i 0
  let all-providers providers-on patches

  while [i < nb_remove] [
    let target one-of all-providers
    ifelse target != nobody
    [ ask target [die]
    set i (i + 1)]
    [set i nb_remove]

  ]

end

; il y a x consumers qui quittent le MAS a la fin de chaque étape; x est limité par une quantité p_CPC - une proportion de la population
to remove-consumers
  let x random p_CPC

  let nb_remove (nb-consumers / 100 * x )
  ;show "remove: "
  ;show nb_remove
  let i 0
  let all-consumers consumers-on patches

  while [i < nb_remove] [
    let target one-of all-consumers
    ifelse target != nobody
    [ ask target [die]
    set i (i + 1)]
    [set i nb_remove]
  ]
end

; a la fin de chaque étape, x providers apparaissent dans le MAS
to add-providers
  let x random p_PPC

  let nb_add (nb-providers / 100 * x )
  set nb_add round nb_add
  ;show "add: "
  ;show nb_add
  create-providers nb_add
    [ set r0 10
      set theta random-float 360.0
      set phi random-float 360.0
      let classe random 3
      let m-min item classe mu-min
      let m-max item classe mu-max
      let m (m-min + random-float (m-max - m-min))
      let s item classe sigma
      set performance random-normal m s
      let coord pos theta phi rayon
      setxyz item 0 coord
             item 1 coord
             item 2 coord
      set shape "turtle"
    set color item classe colors
    set R-CR []
  ]
end

; a la fin de chaque étape, x consumers apparaissent dans le MAS
to add-consumers
  let x random p_CPC

  let nb_add (nb-consumers / 100 * x )
  set nb_add round nb_add
  create-consumers nb_add
    [ set r0 10
      set alpha random 100
      set theta random-float 360.0
      set phi random-float 360.0
      let coord pos theta phi rayon
      setxyz item 0 coord
             item 1 coord
             item 2 coord
      set shape "turtle"
      set color blue

    set R-IT []
  ]
end

; =========================== TOPOLOGIE SPHERIQUE ======================

; La fonction pour calculer la distance sur la sphere entre les points des coordonnées cartésiennes (x1, y1, z1) et (x2, y2, z2).
to-report spherical-distance [x1 y1 z1 x2 y2 z2]
 let d_x (x1 - x2) ^ 2
 let d_y (y1 - y2) ^ 2
 let d_z (z1 - z2) ^ 2
 let d sqrt (d_x + d_y + d_z) ; distance cartésienne des deux points
 set d d / 2
 let alp asin (d / rayon ) ; on calcule le demi-angle entre les points
 ;show "alpha............"
 ;show alpha
 report rayon * 2 * pi * ( alp / 360.0 ); le longueur de l'arc entre deux points
end

; La fonction qui transforme les coordonnées sphériques (r t p) en coordonnées cartésiennes (x y z)
to-report pos [t p r]
  let x (r * (sin p) * (cos t))
  let y (r * (sin p) * (sin t))
  let z (r * (cos p))
  report (list x y z)
end

; ========================= FONCTIONS POUR CALCULER LA TRUST VALUE ========================

to-report near-providers [t p r]
  let all-providers providers-on patches ; retourne toutes les agents de type "provider"
  ;show [who] of all-providers
  let coord1 pos t p rayon
  let x1 item 0 coord1
  let y1 item 1 coord1
  let z1 item 2 coord1
  ask all-providers
  [
    let coord pos theta phi rayon
    let x2 item 0 coord
    let y2 item 1 coord
    let z2 item 2 coord
    let d spherical-distance x1 y1 z1 x2 y2 z2
    ;show d
    ;show r
    if  d > r
    [ set all-providers all-providers with [self != myself]] ; supprime l'agent de l'agentset
  ]
  ;show [who] of all-providers
  report all-providers
end

to-report get-ids [agents]
  let whos []
  ask agents [
    set whos lput who whos
  ]
  report whos
end

to-report provide-service
  report performance
end


; ---------------------- Fonctions liées à la composante IT ---------------------

to-report  has-IT [x]
  foreach R-IT
  [it -> let y item 1 it
    if y = x [report true]]

  report false
end

to-report w_I [r]
  let t item 2 r
  let dt  ticks - t

  let lambda (- 5 / (ln 0.5)) ; !!! La variable devrait apparaitre dans l'interface

  let exponent (- dt / lambda)
  ;show exponent
  report exp exponent
end


to-report T_I [list_r]
  if not empty? list_r
  [let num 0
  let denom 0
  ;show list_r
  foreach list_r
  [ r -> let t item 2 r
    let v item 3 r
    let w w_I r
    set num (num + (w * v))
    set denom denom + w
  ]
    report num / denom]
  report 0
end


to new-record-IT [c p t v]
  ;show "in new record"
  ;show R-IT
  ifelse not empty? R-IT
  [let L length R-IT
  ;show "L"

  ;show L
  ifelse L < H
  [set R-IT lput (list c p t v ) R-IT]
  [set R-IT but-first R-IT
    set R-IT lput (list c p t v ) R-IT]
  ]
  [set R-IT lput (list c p t v ) R-IT]
end

to-report ro_RI [list-r]
  let somme 0
  foreach list-r
  [r -> let w w_I r
   set somme (somme + w)
  ]
  let exponent (- gamma-i * somme)
  report (1 - exp exponent)
end

to-report ro_DI [list-r T]
  let somme-denom 0
  let somme-num 0
  foreach list-r
  [r -> let w w_I r
   let v item 3 r
   let diff (abs v - T)
   set somme-num (somme-num + w * diff)
   set somme-denom (somme-denom + w)
  ]
  let frac (0.5 * somme-num / somme-denom )
  report 1 - frac
end

to-report ro_I [list-r T]
  if not empty? list-r
  [let r1 ro_RI list-r
  let r2 ro_DI list-r T
    report r1 * r2]
  report 0
end


; ---------------------  Fonctions liées à la composante CR ------------------

to-report has-CR
let l length R-CR
if l > 0
  [report true]
report false
end



to new-record-CR [c p t v]
  ifelse not empty? R-CR
  [let L length R-CR
  ;show "L"

  ;show L
  ifelse L < H
  [set R-CR lput (list c p t v ) R-CR]
  [ let minimum item 3 item 0 R-CR
    let r-min item 0 R-CR
    foreach R-CR[
    r -> let val item 3 r
    let temps item 3 r
    ifelse val < minimum
        [set minimum val
         set r-min r]
        [if val = minimum and temps < item 2 r-min
          [set minimum val
           set r-min r]
        ]
    ]

    if minimum <= v
    [let index position r-min R-CR
     set R-CR remove index R-CR
        set R-CR lput (list c p t v ) R-CR]
    ]
  ]
  [set R-CR lput (list c p t v ) R-CR]
end

to-report has-TV [provider-id]

  if has-IT provider-id
  [report true]

  let bool false

  ask provider provider-id [set bool has-CR]
  report bool
end

to-report w_C [r] ; pareil comme w_I si les agents sont honnetes
  let t item 2 r
  let dt  ticks - t

  let lambda (- 5 / (ln 0.5)) ; !!! La variable devrait apparaitre dans l'interface

  let exponent (- dt / lambda)
  ;show exponent
  report exp exponent
end

to-report T_C [list_r]
  if not empty? list_r
  [let num 0
  let denom 0
  ;show list_r
  foreach list_r
  [ r -> let t item 2 r
    let v item 3 r
    let w w_I r
    set num (num + (w * v))
    set denom denom + w
  ]
    report num / denom
  ]

  report 0
end

to-report ro_RC [list-r]
  let somme 0
  foreach list-r
  [r -> let w w_C r
   set somme (somme + w)
  ]
  let exponent (- gamma-c * somme)
  report (1 - exp exponent)
end

to-report ro_DC [list-r T]
  let somme-denom 0
  let somme-num 0
  foreach list-r
  [r -> let w w_C r
   let v item 3 r
   let diff (abs v - T)
   set somme-num (somme-num + w * diff)
   set somme-denom (somme-denom + w)
  ]
  let frac (0.5 * somme-num / somme-denom )
  report 1 - frac
end

to-report ro_C [list-r T]
  if not empty? list-r
  [let r1 ro_RC list-r
  let r2 ro_DC list-r T
    report r1 * r2]
  report 0
end

; ----------------- Fonctions pour calculer la valeur complète de TV --------------------

to-report trust-IT-CR [list-I list-C]
  let trust-I T_I list-I
  let trust-C T_C list-C
  let reliability-I (W-I * ro_I list-I trust-I)
  let reliability-C (W-C * ro_C list-C trust-C)

  let num (reliability-I * trust-I + reliability-C * trust-C)
  let denom reliability-I + reliability-C
end


; ======================= FONCTIONS SETUP ET GO ===================


to setup
  clear-all

  ; set globals
  set rayon 10 ; rayon de la sphere
  set mu-min [5 0 -10]
  set mu-max [10 5 0]
  set sigma [1 2 2]
  set colors [65 45 15]

  ; create providers
  create-providers nb-providers
    [ set r0 10
      set theta random-float 360.0
      set phi random-float 360.0
      let classe random 3
      let m-min item classe mu-min
      let m-max item classe mu-max
      let m (m-min + random-float (m-max - m-min))
      let s item classe sigma
      set performance random-normal m s
      let coord pos theta phi rayon
      setxyz item 0 coord
             item 1 coord
             item 2 coord
      set shape "turtle"
    set color item classe colors
    set R-CR []
  ]

  ; create consumers
  create-consumers nb-consumers
    [ set r0 10
      set alpha random 100
      set theta random-float 360.0
      set phi random-float 360.0
      let coord pos theta phi rayon
      setxyz item 0 coord
             item 1 coord
             item 2 coord
      set shape "turtle"
      set color blue

    set R-IT [] ;pour les test uniquement   !!!
  ]

  ;ask consumers [
  ;  let filtered-providers near-providers theta phi r0
   ; show [who] of filtered-providers
    ;let x count filtered-providers
    ;show x
  ;]

  ;ask providers [
   ; switch-profile
  ;]

  reset-ticks
end

to go
  let UG_moyenne-IT []
  ask consumers[
    let r random 100
    let consumer-id who

    if r <= alpha ;demander un service
    [ let UG false
      let all-providers near-providers theta phi r0
      ;ask all-providers [show who]
      ;let hasTrustValue
      let whos get-ids all-providers ; on récupère des identifiants des providers
      ;show whos
      let notHasTV filter [x -> not has-IT x] whos  ; les providers pour lesquels on n'a pas de trust value
      ;let notHasTV filter [x -> not has-TV x] whos   - ADAPTE pour CR
      ;show notHasTV

      let hasTV filter [x -> has-IT x] whos ; les providers pour lesquels on a le trust value
      ;let hasTV filter [x-> has-TV x]   - ADAPTE POUR CR

      let list_TV [] ;  liste des trust values des providers de hasTV
      foreach hasTV
      [ id -> let list_refs filter [x -> (item 1 x = id)] R-IT ; on récupère toutes les références du provider x
        ; !!! Il faudra ajouter des autres components
        ;show list_refs
        set list_TV lput (T_I list_refs) list_TV ; on calcule sa TV et on l'ajoute à la fin de list_TV
        ; = > list_TV[i] = la truste value du provider hasTV[i]
      ]
      ;show hasTV
      ;show list_TV

      ifelse not empty? list_TV
      [
        let max-TV max list_TV ; la valeur expecté de TV
        let moy-TV mean list_TV ; la valeur expecté moyenne
        let exponent-a1 (max-TV / ticks )
        let exponent-a2 (moy-TV / ticks )
        let denom ((exp exponent-a1) + (exp exponent-a2))
        let p-a1 ((exp exponent-a1) / denom)

        let p random-float 1.0

        ifelse p <= p-a1
          ; on demande le meilleur provider de nous donner un service]
          [ let i position max-TV list_TV ; on récupère l'indice du meilleur provider
            let provider-who item i hasTV
            ;show "provider-known :"
            ;show provider-who
            ask provider provider-who
            [set UG provide-service
                 new-record-CR consumer-id who ticks UG
                 ;show R-CR
            ;show "performance :"
            ;show performance ]
          ]
            ;show UG
            new-record-IT who provider-who ticks UG

          ]
          ; else :
          ; on demande au hasard un des providers inconnus
          [let provider-who one-of notHasTV
          ;show "provider-who"
          ;show provider-who
          ask provider provider-who [set UG provide-service
            new-record-CR consumer-id who ticks UG
            ;show R-CR
          ;show "performance :"
          ;show performance]
            ]
          new-record-IT who provider-who ticks UG
      ]


      ]
      [if not empty? notHasTV
        [let provider-who one-of notHasTV
          ;show "provider-hasard"
          ;show provider-who
          ask provider provider-who [set UG provide-service
            new-record-CR consumer-id who ticks UG
            ;show R-CR
          ;show "performance :"
          ;show performance]
            ]
          new-record-IT who provider-who ticks UG
        ]

      ] ;else du premier if - il n'y a aucune information sur aucun provider, on doit choisir au hasard
      ;show "UG :"
      ;show UG
      set UG_moyenne-IT lput UG UG_moyenne-IT
    ]

  ]

  ;show "T :"
  ;show ticks
  if not empty? UG_moyenne-IT
  [set moyenne-IT mean UG_moyenne-IT]
  ;show "Moyenne :"
  ;show moyenne-IT


  ask providers [
    switch-profile
    change-performance
  ]
  ask turtles [
    change-position
  ]
  remove-providers
  add-providers
  remove-consumers
  add-consumers
  display
  tick
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
439
460
-1
-1
13.0
1
10
1
1
1
0
1
1
1
-16
16
-16
16
-16
16
1
0
1
ticks
30.0

BUTTON
7
289
70
322
NIL
Setup\n
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
8
10
180
43
nb-providers
nb-providers
0
100
100.0
1
1
NIL
HORIZONTAL

SLIDER
9
53
181
86
nb-consumers
nb-consumers
0
500
500.0
1
1
NIL
HORIZONTAL

SLIDER
256
15
428
48
p_muC
p_muC
0
100
10.0
1
1
%
HORIZONTAL

SLIDER
254
58
426
91
p_switchProfile
p_switchProfile
0
100
0.0
1
1
%
HORIZONTAL

SLIDER
255
99
427
132
M_mu
M_mu
0
10
1.0
0.1
1
NIL
HORIZONTAL

BUTTON
80
290
143
323
go
go\n
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
0

SLIDER
454
15
626
48
d_phi
d_phi
0
90
9.0
1
1
°
HORIZONTAL

SLIDER
454
57
626
90
p_PLC
p_PLC
0
100
10.0
1
1
%
HORIZONTAL

SLIDER
258
159
430
192
p_CPC
p_CPC
0
100
5.0
1
1
%
HORIZONTAL

SLIDER
457
159
629
192
p_PPC
p_PPC
0
100
2.0
1
1
%
HORIZONTAL

SLIDER
463
216
635
249
H
H
0
100
10.0
1
1
NIL
HORIZONTAL

PLOT
655
16
1230
166
FIRE-IT 
T
UG
0.0
200.0
-10.0
10.0
true
false
"" ""
PENS
"UG" 1.0 0 -13840069 true "" "plot moyenne-IT"
"" 1.0 0 -16777216 true "" "plot 0"
"" 1.0 0 -9276814 true "" "plot 5"
"" 1.0 0 -7500403 true "" "plot -5"

SLIDER
11
93
183
126
gamma-I
gamma-I
0
1
0.5
0.01
1
NIL
HORIZONTAL

SLIDER
13
136
185
169
gamma-C
gamma-C
0
1
0.5
0.01
1
NIL
HORIZONTAL

SLIDER
13
180
185
213
W-I
W-I
0
1
0.5
0.01
1
NIL
HORIZONTAL

SLIDER
17
223
189
256
W-C
W-C
0
1
0.5
0.01
1
NIL
HORIZONTAL

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.0.4
@#$#@#$#@
need-to-manually-make-preview-for-this-model
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
